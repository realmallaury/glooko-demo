// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "glooko/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ReadingRepository is an autogenerated mock type for the ReadingRepository type
type ReadingRepository struct {
	mock.Mock
}

// AddReadingAndUpdateStats provides a mock function with given fields: ctx, deviceID, userID, value, timestamp
func (_m *ReadingRepository) AddReadingAndUpdateStats(ctx context.Context, deviceID string, userID string, value int, timestamp time.Time) error {
	ret := _m.Called(ctx, deviceID, userID, value, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for AddReadingAndUpdateStats")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, time.Time) error); ok {
		r0 = rf(ctx, deviceID, userID, value, timestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchDevicesOverview provides a mock function with given fields: ctx, userID, days
func (_m *ReadingRepository) FetchDevicesOverview(ctx context.Context, userID string, days int) ([]domain.DayDeviceCounts, error) {
	ret := _m.Called(ctx, userID, days)

	if len(ret) == 0 {
		panic("no return value specified for FetchDevicesOverview")
	}

	var r0 []domain.DayDeviceCounts
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]domain.DayDeviceCounts, error)); ok {
		return rf(ctx, userID, days)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []domain.DayDeviceCounts); ok {
		r0 = rf(ctx, userID, days)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.DayDeviceCounts)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, userID, days)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchReadings provides a mock function with given fields: ctx, userID, startDate, endDate
func (_m *ReadingRepository) FetchReadings(ctx context.Context, userID string, startDate time.Time, endDate time.Time) ([]domain.Reading, error) {
	ret := _m.Called(ctx, userID, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for FetchReadings")
	}

	var r0 []domain.Reading
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) ([]domain.Reading, error)); ok {
		return rf(ctx, userID, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) []domain.Reading); ok {
		r0 = rf(ctx, userID, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Reading)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, userID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReadingRepository creates a new instance of ReadingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReadingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReadingRepository {
	mock := &ReadingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
